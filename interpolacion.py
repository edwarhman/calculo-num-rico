# -*- coding: utf-8 -*-
"""practica_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12i00NYfF23bXxG1Q8tsvrjUmSyivfV_m
"""

import numpy as np
from sympy import symbols
from sistemasLineales import SistemaLineal


xsym = symbols("x")


class Polinomio:
    def __init__(self, coeficientes):
        self.coeficientes = coeficientes
        self.grado = len(coeficientes) - 1
        self.expresion = self.construir_polinomio()

    def __str__(self):
        return str(self.expresion)

    def __repr__(self):
        return str(self.expresion)

    def construir_polinomio(self):
        poly = 0
        for i in range(self.grado, -1, -1):
            poly = poly + self.coeficientes[i] * (xsym**i)
        return poly

    def evaluar_polinomio(self, x):
        return self.expresion.subs(xsym, x)


class Puntos:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __str__(self):
        return str(self.x) + "\n" + str(self.y)

    def __repr__(self):
        return str(self.x) + "\n" + str(self.y)

    @staticmethod
    def construirDesdeExpresion(x, expresion):
        y = expresion(x)
        return Puntos(x, y)

    @staticmethod
    def construirDesdeTabla(tabla):
        x = tabla[:, 0]
        y = tabla[:, 1]
        return Puntos(x, y)


def interpolacionCoeficientesIdeterminados(x, y):
    X = np.vander(x, increasing=True)
    coeficientes = SistemaLineal(X, y).resolver_por_factorizacion_palu()
    return Polinomio(coeficientes)


"""## Polinomio interpolante de Lagrange"""


def polinomioInterpolanteDeLagrange(x, y):
    n = x.size
    coeficientes = 0
    for i in range(n):
        langraniano = 1
        for j in range(n):
            if j != i:
                mul = (xsym - x[j]) / (x[i] - x[j])
                langraniano = langraniano * mul
        coeficientes = coeficientes + y[i] * langraniano
    return Polinomio(coeficientes)


"""## Diferencias Divididas"""


def diferenciasDivididas(x, y):
    n = x.size
    coeficientes = np.copy(y)

    for i in range(1, n):
        coeficientes[i:n] = (coeficientes[i:n] -
                             coeficientes[i - 1]) / (x[i:n] - x[i - 1])
    return Polinomio(coeficientes)


"""## Polinomio Interpolante de Newton"""


def polinomioInterpolanteDeNewton(x, y):
    n = x.size
    coeficientes = 0
    c = diferenciasDivididas(x, y)

    for i in range(n):
        mul = 1
        for j in range(i):
            mul = mul * (xsym - x[j])
        coeficientes = coeficientes + c[i] * mul
    return Polinomio(coeficientes)


"""## Ajuste minimos cuadrados"""


def ajusteMinimosCuadrados(x, y, m):
    if len(x) != len(y):
        print("Los vectores deben tener la misma longitud")
        return
    n = len(x)
    # Inicializar matriz gradiente y vector
    matriz = np.zeros((m, m))
    vector = np.zeros(m)

    # Iterar para encontrar los m coeficientes
    for i in range(m):
        # Encontrar valores de la matriz
        for j in range(i, m):
            sumaMatriz = 0
            for k in range(n):
                sumaMatriz = sumaMatriz + x[k] ** (i + j)
            matriz[i, j] = sumaMatriz

        # Encontrar valores del vector
        sumaVector = 0
        for k in range(n):
            sumaVector = sumaVector + x[k] ** i * y[k]
        vector[i] = sumaVector

    # Llenar la matriz inferrior de la matriz copiando la transpuesta
    #  de la matriz y restando la diagonal principal
    matriz = matriz + matriz.transpose() - np.diag(matriz.diagonal())
    # asignamos a la primera celda de la matriz el numero de coeficientes
    # que queremos encontrar
    matriz[0, 0] = n

    # Encontramos y devolvemos los coeficientes a resolviendo el sistema
    #  de ecuaciones lineales
    polinomio = SistemaLineal(matriz, vector).resolver_por_factorizacion_palu()
    return Polinomio(polinomio)
